[
    {
        "id": "9c3be5f3.90e288",
        "type": "tab",
        "label": "SALUTE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e81402f5.f8254",
        "type": "tab",
        "label": "FTH VideoChecker",
        "disabled": false,
        "info": "This flow checks the simple-RTSP video service using the API and parses the active paths.\nWhen a path is present, it creates a video endpoint to FTS.\nFTS sends the video to all the connected TAK devices.\nEndpoints with the same name will be updated."
    },
    {
        "id": "d770d3ca48d341a5",
        "type": "tab",
        "label": "Webmap",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c3abc391.1d58",
        "type": "ui_group",
        "name": "SALUTE Form",
        "tab": "5809210.24f5ce",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "5809210.24f5ce",
        "type": "ui_tab",
        "name": "FTS Forms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "72983f63c8fade07",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3db9bf25.a5ca2",
        "type": "ui_form",
        "z": "9c3be5f3.90e288",
        "name": "form",
        "label": "SALUTE",
        "group": "c3abc391.1d58",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Report Name",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Location",
                "value": "address",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Callsign",
                "value": "userCallsign",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "report Date",
                "value": "dateTime",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "TimeObserved",
                "value": "time",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Duration of Even",
                "value": "Duration",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "event Scale",
                "value": "eventScale",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Type",
                "value": "type",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Equipment",
                "value": "equipment",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "status",
                "value": "status",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Size",
                "value": "size",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Importance",
                "value": "importance",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Activity",
                "value": "activity",
                "type": "multiline",
                "required": true,
                "rows": 3
            },
            {
                "label": "Unit Identification",
                "value": "Identification",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Assessed Threats",
                "value": "AssessedThreats",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "MethodOfDetection",
                "value": "Method",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Surveillance Type",
                "value": "SurveillanceType",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Final Remarks",
                "value": "FinalRemarks",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "name": "",
            "address": "",
            "userCallsign": "",
            "dateTime": "",
            "time": "",
            "Duration": "",
            "eventScale": "",
            "type": "",
            "equipment": "",
            "status": "",
            "size": "",
            "importance": "",
            "activity": "",
            "Identification": "",
            "AssessedThreats": "",
            "Method": "",
            "SurveillanceType": "",
            "FinalRemarks": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 290,
        "y": 220,
        "wires": [
            [
                "b141c7b.7bd5138",
                "12195b34.dece55"
            ]
        ]
    },
    {
        "id": "1bde6131.aeec3f",
        "type": "debug",
        "z": "9c3be5f3.90e288",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 280,
        "wires": []
    },
    {
        "id": "2d8912f5.e50c8e",
        "type": "http request",
        "z": "9c3be5f3.90e288",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://127.0.0.1:19023/ManageKML/postKML",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 670,
        "y": 220,
        "wires": [
            [
                "1bde6131.aeec3f",
                "573bdb94.029964"
            ]
        ]
    },
    {
        "id": "b141c7b.7bd5138",
        "type": "function",
        "z": "9c3be5f3.90e288",
        "name": "Create rest",
        "func": "msg.payload ={\n  name: msg.payload.name,\n address: msg.payload.address,\n  body :{\n  userCallsign: msg.payload.userCallsign,\n  dateTime: msg.payload.dateTime,\n  TimeObserved: msg.payload.time,\n  MethodOfDetection: msg.payload.Method,\n  SurveillanceType: msg.payload.SurveillanceType,\n  DurationofEvent: msg.payload.Duration,\n  eventScale: msg.payload.eventScale,\n  type: msg.payload.type,\n  Size:msg.payload.size,\n  Equipment: msg.payload.equipment,\n  activity: msg.payload.activity,\n  importance: msg.payload.importance,\n  status: msg.payload.status,\n  Identification: msg.payload.Identification,\n  AssessedThreats: msg.payload.AssessedThreats,\n  FinalRemarks: msg.payload.FinalRemarks\n}\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "2d8912f5.e50c8e",
                "f14ea69be158a681"
            ]
        ]
    },
    {
        "id": "573bdb94.029964",
        "type": "ui_toast",
        "z": "9c3be5f3.90e288",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "12195b34.dece55",
        "type": "debug",
        "z": "9c3be5f3.90e288",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 280,
        "wires": []
    },
    {
        "id": "f14ea69be158a681",
        "type": "debug",
        "z": "9c3be5f3.90e288",
        "name": "REST",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "0565f229206163d0",
        "type": "comment",
        "z": "9c3be5f3.90e288",
        "name": "CONFIG ME!!!!",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "2a7e77e7.a92748",
        "type": "http request",
        "z": "e81402f5.f8254",
        "name": "Post Video to FTS",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:19023/ManageVideoStream/postVideoStream",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "x": 970,
        "y": 240,
        "wires": [
            [
                "25874402.182cec",
                "f8da2c2e.b2fb3"
            ]
        ]
    },
    {
        "id": "25874402.182cec",
        "type": "switch",
        "z": "e81402f5.f8254",
        "name": "check return",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "500",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "791450ee.61b5a"
            ],
            [
                "1b6de090.e2467f"
            ],
            [
                "a48bd58e.401dc8"
            ]
        ]
    },
    {
        "id": "791450ee.61b5a",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "Success!",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 200,
        "wires": []
    },
    {
        "id": "1b6de090.e2467f",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": " INTERNAL SERVER ERROR",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 240,
        "wires": []
    },
    {
        "id": "a48bd58e.401dc8",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "Non authorized",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 300,
        "wires": []
    },
    {
        "id": "41b82d8d.8266e4",
        "type": "function",
        "z": "e81402f5.f8254",
        "name": "CreateVideoStream",
        "func": "\n  msg.addr =  global.get('FTH_FTS_URL');\n  msg.port = global.get('FTH_FTS_API_Port');\n  msg.streamPort = global.get('FTH_FTS_STREAM_Port');\n  msg.streamAddress =  global.get('FTH_FTS_VIDEO_URL');\n  let streamPath =  msg.payload;\n  let  alias =  msg.payload;\n  let streamProtocol= \"rtsp\";\n\n \n\nmsg.payload = [];\n\n msg.payload={\n     alias: alias,\n     streamProtocol: streamProtocol,\n     streamAddress:  msg.streamAddress,\n     streamPort: msg.streamPort ,\n     streamPath: streamPath,\n };\n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 280,
        "wires": [
            [
                "2a7e77e7.a92748",
                "351711f.8aa5aee"
            ]
        ]
    },
    {
        "id": "351711f.8aa5aee",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "Rest Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "f8da2c2e.b2fb3",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "529fdac2.273054",
        "type": "http request",
        "z": "e81402f5.f8254",
        "name": "Connect to RTSP server",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:9997/v1/paths/list",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "801fd65f.5be7d8",
                "70339513.554ecc"
            ]
        ]
    },
    {
        "id": "801fd65f.5be7d8",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "received from JSON",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 80,
        "wires": []
    },
    {
        "id": "5812cb15.cd4b04",
        "type": "inject",
        "z": "e81402f5.f8254",
        "name": "start",
        "props": [
            {
                "p": "addr",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "ab5e51e8.e29b5"
            ]
        ]
    },
    {
        "id": "e7eb8030.427a4",
        "type": "switch",
        "z": "e81402f5.f8254",
        "name": "check streams",
        "property": "payload.source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 600,
        "y": 400,
        "wires": [
            [],
            [
                "7fc68a9f.e82fe4"
            ],
            []
        ]
    },
    {
        "id": "7fc68a9f.e82fe4",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "no stream!",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "b6661f0d.790e8",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "after split",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 460,
        "wires": []
    },
    {
        "id": "70339513.554ecc",
        "type": "split",
        "z": "e81402f5.f8254",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "ce49e6a3.280768",
                "7714b387.25136c"
            ]
        ]
    },
    {
        "id": "90676aac.d49f98",
        "type": "split",
        "z": "e81402f5.f8254",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 420,
        "wires": [
            [
                "b6661f0d.790e8",
                "e7eb8030.427a4"
            ]
        ]
    },
    {
        "id": "ab5e51e8.e29b5",
        "type": "function",
        "z": "e81402f5.f8254",
        "name": "getVideoStream",
        "func": "\n  msg.addr =  global.get('FTH_FTS_VIDEO_URL');\n  msg.port = global.get('FTH_FTS_VIDEO_API_PORT');\n \n    \nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "529fdac2.273054"
            ]
        ]
    },
    {
        "id": "cb4abca3.6a73d",
        "type": "config",
        "z": "e81402f5.f8254",
        "name": "FTH Global Config",
        "properties": [
            {
                "p": "FTH_FTS_URL",
                "pt": "global",
                "to": "127.0.0.1",
                "tot": "str"
            },
            {
                "p": "FTH_FTS_TCP_Port",
                "pt": "global",
                "to": "8087",
                "tot": "str"
            },
            {
                "p": "FTH_FTS_API_Port",
                "pt": "global",
                "to": "19023",
                "tot": "str"
            },
            {
                "p": "FTH_FTS_API_Auth",
                "pt": "global",
                "to": "token",
                "tot": "str"
            },
            {
                "p": "FTH_FTS_STREAM_Port",
                "pt": "global",
                "to": "8554",
                "tot": "str"
            },
            {
                "p": "FTH_FTS_VIDEO_URL",
                "pt": "global",
                "to": "{{ true_web_ipv4 }}",
                "tot": "str"
            },
            {
                "p": "FTH_FTS_VIDEO_API_PORT",
                "pt": "global",
                "to": "9997",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "ce49e6a3.280768",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "conf name",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 60,
        "wires": []
    },
    {
        "id": "7714b387.25136c",
        "type": "function",
        "z": "e81402f5.f8254",
        "name": "",
        "func": "\nnode.warn(Object.keys(msg.payload).length);\nfor (let i = 0; i < Object.keys(msg.payload).length; i++) { \n // node.warn(Object.keys(msg.payload)[i])\n  if (Object.values(msg.payload)[i].source){\n        msg.payload = \"/\"+Object.keys(msg.payload)[i]\n        node.send(msg)\n  }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 160,
        "wires": [
            [
                "41b82d8d.8266e4",
                "b6146596.a3aeb8"
            ]
        ]
    },
    {
        "id": "b6146596.a3aeb8",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "after function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "bfadd2cc.7c368",
        "type": "inject",
        "z": "e81402f5.f8254",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 520,
        "wires": [
            [
                "a4bc3376.a38dd"
            ]
        ]
    },
    {
        "id": "a4bc3376.a38dd",
        "type": "function",
        "z": "e81402f5.f8254",
        "name": "",
        "func": "var colors=[\"red\",\"blue\",\"green\"];\nfor (let i = 0; i < colors.length; i++) { \n  msg.payload = colors[i]\n  node.send(msg);\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 520,
        "wires": [
            [
                "c290bbb3.401e98"
            ]
        ]
    },
    {
        "id": "c290bbb3.401e98",
        "type": "debug",
        "z": "e81402f5.f8254",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 520,
        "wires": []
    },
    {
        "id": "30364cf453c684c8",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Customize this!",
        "info": "",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "d38899243d7abb84",
        "type": "inject",
        "z": "d770d3ca48d341a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 120,
        "wires": [
            [
                "8b181d6bedd05583"
            ]
        ]
    },
    {
        "id": "8b181d6bedd05583",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "CoT Ping",
        "func": "  msg.host =  global.get('FTH_FTS_URL');\n  msg.port = global.get('FTH_FTS_TCP_Port');\nconst dt = Date.now();\nconst dtD = new Date(dt).toISOString();\nconst dtD5 = new Date(dt + 250000).toISOString();\n\nmsg.payload = {\n    event: {\n        \"$\": { \n            version: \"2.0\", \n            type: \"t-x-d-d\", \n            uid : \"node-red\",\n            time: dtD,\n            start: dtD,\n            stale: dtD5,\n            how: \"m-g\"\n        }\n    }\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 200,
        "wires": [
            [
                "8449b56eae3b983e"
            ]
        ]
    },
    {
        "id": "8449b56eae3b983e",
        "type": "xml",
        "z": "d770d3ca48d341a5",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "aa813829d3f7fe7e"
            ]
        ]
    },
    {
        "id": "051f20f25b4f46e9",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Keep Server Connection Alive",
        "info": "",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "aa813829d3f7fe7e",
        "type": "tcp request",
        "z": "d770d3ca48d341a5",
        "name": "FTS Server",
        "server": "",
        "port": "",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "699d2c35a2dafdd1",
                "e48cd8e53bd4d730"
            ]
        ]
    },
    {
        "id": "699d2c35a2dafdd1",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "buf->str",
        "func": "/*\nlet oldPayload = msg.payload;\nmsg.payload = oldPayload.toString();\nreturn msg;\n*/\n\nvar rest = context.rest || \"\";\nvar p = rest + msg.payload.toString();\nvar b = p.split(\"</event>\");\nwhile (b.length > 1) {\n    var m = b.shift();\n    node.send({ payload: m + \"</event>\" });\n}\ncontext.rest = b;\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "1c61dbd1ac807e30"
            ]
        ]
    },
    {
        "id": "1c61dbd1ac807e30",
        "type": "xml",
        "z": "d770d3ca48d341a5",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 750,
        "y": 200,
        "wires": [
            [
                "6d13e472785ca47a"
            ]
        ]
    },
    {
        "id": "df42b70e41dcc6d6",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Connect to FTS",
        "info": "",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "cd4ff509ba9695ce",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Convert to Worldmap Payload",
        "info": "",
        "x": 900,
        "y": 120,
        "wires": []
    },
    {
        "id": "877c5ba931a2bc9d",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "TAK map output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 200,
        "wires": []
    },
    {
        "id": "a1de30d61187ddc9",
        "type": "worldmap",
        "z": "d770d3ca48d341a5",
        "name": "TAK Map",
        "lat": "43",
        "lon": "13",
        "zoom": "4",
        "layer": "EsriDG",
        "cluster": "",
        "maxage": "5000",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "true",
        "allowFileDrop": "true",
        "path": "/tak-map",
        "overlist": "DR,CO,RA,DN,BU,RW,SN,AC,TL,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,OpTop,SW",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1100,
        "y": 240,
        "wires": []
    },
    {
        "id": "ee9f936e1af30c3a",
        "type": "worldmap in",
        "z": "d770d3ca48d341a5",
        "name": "",
        "path": "/tak-map",
        "events": "connect",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "e208221f934b9cf3"
            ]
        ]
    },
    {
        "id": "0e8606528c66d3ea",
        "type": "worldmap in",
        "z": "d770d3ca48d341a5",
        "name": "event",
        "path": "/tak-map",
        "events": "other",
        "x": 390,
        "y": 440,
        "wires": [
            [
                "80fda2fb3219df88"
            ]
        ]
    },
    {
        "id": "985f5b550810775c",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "No form!!",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 500,
        "wires": []
    },
    {
        "id": "e208221f934b9cf3",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "form",
        "func": "msg.payload = { command: {\ncontextmenu: String.raw`\n<table border=0><tr>\n<th>Attitude</th><td><select id=\"myatt\">\n  <option value=\"friend\">Friend</option>\n  <option value=\"hostile\">Hostile</option>\n  <option value=\"neutral\">Neutral</option>\n  <option value=\"unknown\">Unknown</option>\n  <option value=\"pending\">Pending</option>\n  <option value=\"suspect\">Suspect</option>\n  <option value=\"assumed\">Assumed Friend</option>\n  </select></td>\n</tr><tr>\n<th>Type</th><td><select id=\"mytyp\" value=\"Ground\" onchange=\"document.getElementById('mynam').value = this.value+'-'+parseInt(Math.random()*9999);\">\n  <option value=\"Rifleman\">Rifleman</option>\n  <option value=\"Grenadier\">Grenadier</option>\n  <option value=\"Gnd Combat Infantry Mortar\">Mortar</option>\n  <option value=\"Medic\">Medic</option>\n  <option value=\"Gnd Combat Infantry anti Tank\">anti Tank</option>\n  <option value=\"Sniper\">Sniper</option>\n  <option value=\"Recon\">Recon</option>\n  <option value=\"Gnd Combat Infantry air defense\">AA</option>\n  <option value=\"Engineer\">Engineer</option>\n</select></td>\n</tr><tr>\n<th>Timeout</th><td><input type=\"number\" id=\"mytout\" step=\"10\" value=\"600\">S</td>\n</tr><tr>\n<th>Name</th><td><input type=\"text\" id=\"mynam\"></td>\n</tr><tr>\n<th><input type=\"button\" value=\"Send\" onclick=\n'feedback(\"myform\",{\n    \"attitude\":document.getElementById(\"myatt\").value,\n    \"geobject\":document.getElementById(\"mytyp\").value,\n    \"timeout\":document.getElementById(\"mytout\").value,\n    \"name\":document.getElementById(\"mynam\").value,\n},null,true)'\n></th>\n</tr></table>\n`\n}}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 280,
        "wires": [
            [
                "a1de30d61187ddc9"
            ]
        ]
    },
    {
        "id": "aa54c78077985c6c",
        "type": "http request",
        "z": "d770d3ca48d341a5",
        "name": "Post  COT to FTS",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:19023/ManageGeoObject/postGeoObject",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 950,
        "y": 440,
        "wires": [
            [
                "1c3738d7bb7a14cd"
            ]
        ]
    },
    {
        "id": "18b6ff7a4fd41d74",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "",
        "func": "\n  msg.addr =  global.get('FTH_FTS_URL');\n  msg.port = global.get('FTH_FTS_API_Port');\nlet lon = msg.payload.lon;\n  let lat = msg.payload.lat;\n  let attitude = msg.payload.value.attitude;\n  let geoobject = msg.payload.value.geobject;\n  let timeOut = msg.payload.name.timeout;\n  let aName = msg.payload.value.name;\n  let token = global.get('FTH_FTS_API_Auth');\n\n \nmsg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \"+ token;\n \n\nmsg.payload = [];\n\n msg.payload={\n   longitude: lon,\n latitude: lat,\nattitude: attitude,\ngeoObject: geoobject,\nhow: \"nonCoT\",\nname: aName,\ntimeout: timeOut \n };\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "aa54c78077985c6c"
            ]
        ]
    },
    {
        "id": "1c3738d7bb7a14cd",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "API Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 440,
        "wires": []
    },
    {
        "id": "80fda2fb3219df88",
        "type": "switch",
        "z": "d770d3ca48d341a5",
        "name": "check message",
        "property": "payload.value.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 440,
        "wires": [
            [
                "18b6ff7a4fd41d74"
            ],
            [
                "985f5b550810775c"
            ]
        ]
    },
    {
        "id": "20e92f79e0f1fcbd",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Add the menu",
        "info": "",
        "x": 250,
        "y": 20,
        "wires": []
    },
    {
        "id": "6ad13b6b24dfea16",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "Get the result from the post",
        "info": "",
        "x": 330,
        "y": 400,
        "wires": []
    },
    {
        "id": "e48cd8e53bd4d730",
        "type": "debug",
        "z": "d770d3ca48d341a5",
        "name": "Strem output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "6d13e472785ca47a",
        "type": "function",
        "z": "d770d3ca48d341a5",
        "name": "CoT to Map",
        "func": "/*\nThe following block of code transforms a JSONified CoT Event into a Worldmap \nPoint Payload.\n*/\nlet ttl= 3600;\nlet deleted = false; //= 'undefined';\nlet invalid = 9999999;\nlet event = msg.payload[\"event\"];\n\n/* \nIf the CoT Event contains Detail Elements, extract the first one.\nIf there are no Detail Elements, break.\n*/\nlet _detail = event[\"detail\"];\nif (_detail === undefined) { return null; }\nlet detail = _detail[0];\n\n/*\nIf the CoT Event contains a Point element, use it. If not, break.\n*/\nlet point = event[\"point\"];\nif (point === undefined) { return null; }\n\n/* We'll use UID a couple of times, so lets set it as a variable here. */\nlet uid = event[\"$\"][\"uid\"];\n\n/* Extract the Event Type and Affiliation. */\nlet eventType = event[\"$\"][\"type\"];\nif (eventType === \"t-x-d-d\") { return; }  // ignore pings\n\nlet et = eventType.split(\"-\");\nlet affil = et[1];\n\n/* There is no '.' notation in SDR, so mark Neutral. */\nif (affil.includes(\".\")) { affil = \"n\"; } \n\n/* Ram the CoT Event Type portions into a SIDR Type */\nlet SIDC = `s${affil}${et[2]}p${et[3] || \"-\" }${et[4] || \"-\" }${et[5] || \"-\" }--------`;\n\n/* Now handle all the weird extra CoT ones... */\nif ((/a-.-X-i-o/).test(eventType)) { SIDC = `E${affil}IP--------` }\nelse if ((/a-.-X-i-g-a/).test(eventType)) { SIDC = `EFNPAB------` }\nelse if ((/a-.-X-i-g-e/).test(eventType)) { SIDC = `EFNPAC------` }\nelse if ((/a-.-X-i-g-l/).test(eventType)) { SIDC = `EFNPAD------` }\nelse if ((/a-.-X-i-g-s/).test(eventType)) { SIDC = `EFNPAE------` }\nelse if ((/a-.-X-i-g-v-e/).test(eventType)) { SIDC = `WFSPWSVE----` }\nelse if ((/a-.-X-i-g-v/).test(eventType)) { SIDC = `EFNPAG------` }\nelse if ((/a-.-X-i-g/).test(eventType)) { SIDC = `E${affil}NPA-------` }\nelse if ((/a-.-X-i-m-c/).test(eventType)) { SIDC = `WFSPWSTSS---` }\nelse if ((/a-.-X-i-m-d/).test(eventType)) { SIDC = `EFNPBB------` }\nelse if ((/a-.-X-i-m-n/).test(eventType)) { SIDC = `EFNPBM------` }\nelse if ((/a-.-X-i-f/).test(eventType)) { SIDC = `E${affil}IPC-------` }\nelse if ((/a-.-X-i-h/).test(eventType)) { SIDC = `E${affil}OPA-------` }\nelse if ((/a-.-X-i-t-v-a/).test(eventType)) { SIDC = `E${affil}IPHA------` }\n\nelse if ((/a-.-G-I-X-H/).test(eventType)) { SIDC = `S${affil}GPIXH---H-` }\nelse if ((/a-.-G-I-i-l/).test(eventType)) { SIDC = `E${affil}OPDJC-----` }\nelse if ((/a-.-G-I-R-P/).test(eventType)) { SIDC = `S${affil}GPIRP---H-` }\nelse if ((/a-.-G-I-U-E/).test(eventType)) { SIDC = `S${affil}GPIUE---H-` }\nelse if ((/a-.-G-I-U-T/).test(eventType)) { SIDC = `S${affil}GPIUT---H-` }\nelse if ((/a-.-G-I-i-e/).test(eventType)) { SIDC = `E${affil}OPBC------` }\n\nelse if ((/a-.-G-U-C-V-R-E/).test(eventType)) { SIDC = `S${affil}APMFO-----` }\nelse if ((/a-.-A-M-F-Q-H/).test(eventType)) { SIDC = `S${affil}APMFH-----` }\n\nelse if ((/a-.-G-I-U-T/).test(eventType)) { SIDC = `S${affil}GPIUT---H-` }\nelse if ((/b-r-.-O-I-V/).test(eventType)) { SIDC = `S${affil}EFIPAC------` }\n// emrgency open send symbol and reduce ttl\nelse if ((/b-a-o-opn/).test(eventType)) \n{ SIDC = `S${affil}SFGDU-------` ;\n//{ SIDC = `S${affil}EFIPBF------` ;\nttl = 360;    \n}\n//emergency is closed SFGDU-------\nelse if ((/b-a-o-can/).test(eventType)) { deleted = true }\n\n\nconsole.log(eventType,\"--->\",SIDC);\nSIDC = SIDC.substr(0, 12).toUpperCase();\n\n/* \nPoints on the Worldmap can only have one uniquite identifier, which is also\nthat Points display name. If possible, use a Callsign, otherwise use UID.\n*/\nlet callsign;\nlet _contact = detail[\"contact\"];\nif (_contact === undefined) {\n  callsign = uid;\n} else {\n  callsign = _contact[0][\"$\"][\"callsign\"]; \n}\n\n/* Mouse-over Label */\nlet label = `Callsign: ${callsign} UID: ${uid}<br/>Type: ${eventType} SIDC: ${SIDC}`\n\nlet remarks = detail[\"remarks\"];\nif (remarks) {\n  let remark = remarks[0][\"$\"];\n  label = `${label}<br/>${remark}`;\n}\n\nlet track = detail[\"track\"]\nlet bearing = null;\nlet speed = null;\n\nif (track) {\n  let course = +track[0][\"$\"][\"course\"];\n  if (course) {\n    if (course !== invalid) {\n      bearing = course;\n    }\n  }\n\n  let _speed = +track[0][\"$\"][\"speed\"];\n  if (_speed) {\n    if (_speed !== invalid) {\n      speed = _speed;\n    }\n  }\n}\n\n/* \nIf CoT Point CE is set and is not invalid, use that as Worldmap Point Accuracy. \n*/\nlet accuracy = null;\nlet ce = +event[\"point\"][0][\"$\"][\"ce\"];\nif (ce != invalid) { accuracy = ce; }\n\n/* Add a helpful weblink to Worldmap Points. */\nlet weblink = null;\nif (uid.includes(\"ICAO\")) {\n  weblink = `https://globe.adsbexchange.com/?icao=${uid.replace(\"ICAO-\", \"\")}`;\n} else if (uid.includes(\"APRS\")) {\n  weblink = `https://qrz.com/db/${uid.replace(\"APRS.\", \"\").split(\"-\")[0]}`;\n}\nelse{\n      weblink = 'https://spatialillusions.com/unitgenerator/';\n}\n\nlet lat = +event[\"point\"][0][\"$\"][\"lat\"];\nlet lon = +event[\"point\"][0][\"$\"][\"lon\"];\nlet alt = +event[\"point\"][0][\"$\"][\"hae\"];\nif (alt == invalid) { alt = undefined; }\n\nif (lat == 0 && lon == 0 && !alt) {\n  console.log(callsign,\"is at null island.\",eventType)\n  lat = Math.round(1000000 * lat + Math.random() * 10000) / 1000000;\n  lon = Math.round(1000000 * lon + Math.random() * 10000) / 1000000;\n}\n\n/* Serialize as a Worldmap compatible Payload. */\nmsg.payload = {\n  name: callsign,\n  tooltip: label,\ndeleted: deleted,\n  lat: lat,\n  lon: lon,\n  alt: alt,\n  speed: speed,\n  bearing: bearing,\n  accuracy: accuracy,\n  type: eventType,\n  SIDC: SIDC,\n  ttl: ttl,\n  weblink: weblink,\n  layer: eventType,\n  options: { scale:0.8 }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 200,
        "wires": [
            [
                "a1de30d61187ddc9",
                "877c5ba931a2bc9d"
            ]
        ]
    },
    {
        "id": "bc7e2edc9e231604",
        "type": "comment",
        "z": "d770d3ca48d341a5",
        "name": "API Token here",
        "info": "",
        "x": 920,
        "y": 340,
        "wires": []
    }
]
